import json
import glob
import os
import pandas as pd

def read_metrics_from_files():
    """–ß—Ç–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ò–ó –°–û–•–†–ê–ù–ï–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    results = []
    
    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    metric_files = glob.glob("metrics/*.json")
    model_files = glob.glob("models/*")
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–µ—Ç—Ä–∏–∫: {len(metric_files)}")
    print(f"ü§ñ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(model_files)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    test_metrics_files = [f for f in metric_files if 'test' in f]
    for file in test_metrics_files:
        try:
            with open(file, 'r') as f:
                data = json.load(f)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
            if 'transfer_learning' in file or os.path.exists('models/transfer_learning_model.keras'):
                model_name = 'Transfer Learning'
            elif 'cnn' in file or os.path.exists('models/cnn_model.keras'):
                model_name = 'CNN'
            elif 'random_forest' in file or os.path.exists('models/random_forest_model.joblib'):
                model_name = 'Random Forest'
            else:
                model_name = 'Unknown'
            
            results.append({
                'Model': model_name,
                'Accuracy': data.get('test_accuracy', 'N/A'),
                'Precision': data.get('test_precision', 'N/A'),
                'Recall': data.get('test_recall', 'N/A'),
                'F1-Score': data.get('test_f1_score', 'N/A'),
                'ROC-AUC': data.get('test_roc_auc', 'N/A'),
                'Loss': data.get('test_loss', 'N/A')
            })
            print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {model_name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file}: {e}")
    
    return results

def check_data_processing():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        if os.path.exists('data/processed/train/X_train.npy'):
            X_train = np.load('data/processed/train/X_train.npy')
            y_train = np.load('data/processed/train/y_train.npy')
            print(f"üéØ –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_train)} samples")
            print(f"üéØ –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(np.load('data/processed/test/X_test.npy'))} samples")
    except:
        print("üìä –î–∞–Ω–Ω—ã–µ: –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é
    try:
        if os.path.exists('data/augmented/X_augmented.npy'):
            X_aug = np.load('data/augmented/X_augmented.npy')
            print(f"üîÑ –ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(X_aug)} samples")
    except:
        print("üîÑ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

def create_comparison_table(results):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not results:
        print("\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    print("\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô:")
    print("=" * 80)
    print(f"{'–ú–æ–¥–µ–ª—å':<20} {'Accuracy':<10} {'Precision':<10} {'Recall':<10} {'F1-Score':<10} {'ROC-AUC':<10}")
    print("-" * 80)
    
    for result in results:
        print(f"{result['Model']:<20} "
              f"{result['Accuracy']:<10.4f} "
              f"{result['Precision']:<10.4f} "
              f"{result['Recall']:<10.4f} "
              f"{result['F1-Score']:<10.4f} "
              f"{result['ROC-AUC']:<10.4f}")

def main():
    # –î–æ–±–∞–≤–∏–º numpy –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    try:
        import numpy as np
    except:
        print("‚ö†Ô∏è Numpy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö")
        np = None
    
    # –ß–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    results = read_metrics_from_files()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if np:
        check_data_processing()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    create_comparison_table(results)
    
    # –í—ã–≤–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    print("\nüìã –î–õ–Ø –ó–ê–©–ò–¢–´:")
    print("=" * 40)
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ML-–ø–∞–π–ø–ª–∞–π–Ω (dvc repro)")
    print("‚úÖ 3 —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è") 
    print("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (25 ‚Üí 100 samples)")
    print("‚úÖ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ (MLflow)")
    print("‚úÖ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π")
    print("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    if results:
        df = pd.DataFrame(results)
        df.to_csv('final_results.csv', index=False)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ final_results.csv")

if __name__ == "__main__":
    main()