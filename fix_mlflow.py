import os
import mlflow
import json

def fix_mlflow_setup():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ MLflow"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ MLflow...")
    
    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è Windows
    current_dir = os.path.abspath(".")
    tracking_uri = f"file:///{current_dir.replace(':', '')}/mlruns"
    
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print(f"üîó Tracking URI: {tracking_uri}")
    
    mlflow.set_tracking_uri(tracking_uri)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        experiments = mlflow.search_experiments()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(experiments)}")
        
        for exp in experiments:
            print(f"  üìä –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {exp.name}")
            runs = mlflow.search_runs(experiment_ids=[exp.experiment_id])
            print(f"    üöÄ –ó–∞–ø—É—Å–∫–æ–≤: {len(runs)}")
            
            for _, run in runs.iterrows():
                print(f"      - {run['run_id']}: {run.get('tags.mlflow.runName', 'N/A')}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

def create_test_experiment():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    print("\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞...")
    
    mlflow.set_experiment("Food_Classification")
    
    with mlflow.start_run(run_name="test_fix") as run:
        mlflow.log_param("learning_rate", 0.001)
        mlflow.log_param("epochs", 10)
        mlflow.log_metric("accuracy", 0.85)
        mlflow.log_metric("loss", 0.15)
        mlflow.set_tag("model_type", "cnn")
        mlflow.set_tag("purpose", "test_fix")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        test_data = {"test": "data", "value": 123}
        with open("test_artifact.json", "w") as f:
            json.dump(test_data, f)
        
        mlflow.log_artifact("test_artifact.json")
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω: {run.info.run_id}")

if __name__ == "__main__":
    fix_mlflow_setup()
    create_test_experiment()