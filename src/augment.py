import os
import numpy as np
import albumentations as A
from PIL import Image
import cv2
from utils import load_params, setup_mlflow_experiment_safe
import mlflow

def augment_images(images, labels, augmentations_per_image: int = 3):
    """–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    params = load_params()
    aug_params = params['augmentation']
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    transform = A.Compose([
        A.Rotate(limit=aug_params['rotation_range'], p=0.7),
        A.HorizontalFlip(p=aug_params['horizontal_flip']),
        A.ShiftScaleRotate(
            shift_limit=aug_params['width_shift_range'],
            scale_limit=aug_params['zoom_range'],
            rotate_limit=0,
            p=0.7
        ),
        A.RandomBrightnessContrast(
            brightness_limit=aug_params['brightness_range'][1] - 1,
            contrast_limit=0.2,
            p=0.5
        ),
    ])
    
    augmented_images = []
    augmented_labels = []
    
    print("–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    for i, (image, label) in enumerate(zip(images, labels)):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ uint8 –¥–ª—è albumentations
        image_uint8 = (image * 255).astype(np.uint8)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        augmented_images.append(image)
        augmented_labels.append(label)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
        for j in range(augmentations_per_image):
            augmented = transform(image=image_uint8)
            augmented_image = augmented['image'].astype(np.float32) / 255.0
            augmented_images.append(augmented_image)
            augmented_labels.append(label)
    
    return np.array(augmented_images), np.array(augmented_labels)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLflow
    try:
        experiment_id = setup_mlflow_experiment_safe()
        if experiment_id:
            with mlflow.start_run(run_name="data_augmentation"):
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                X_train = np.load("data/processed/train/X_train.npy")
                y_train = np.load("data/processed/train/y_train.npy")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                params = load_params()
                mlflow.log_params(params['augmentation'])
                
                # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                X_augmented, y_augmented = augment_images(X_train, y_train)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                os.makedirs("data/augmented", exist_ok=True)
                np.save("data/augmented/X_augmented.npy", X_augmented)
                np.save("data/augmented/y_augmented.npy", y_augmented)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                mlflow.log_metrics({
                    "original_samples": len(X_train),
                    "augmented_samples": len(X_augmented),
                    "augmentation_ratio": float(len(X_augmented) / len(X_train))
                })
                
                print(f"–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
                print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(X_train)} samples")
                print(f"  –ü–æ—Å–ª–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {len(X_augmented)} samples")
                print(f"  –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ {len(X_augmented) / len(X_train):.2f} —Ä–∞–∑")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å MLflow")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ MLflow: {e}")
        print("üîß –ó–∞–ø—É—Å–∫ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–µ–∑ MLflow...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        X_train = np.load("data/processed/train/X_train.npy")
        y_train = np.load("data/processed/train/y_train.npy")
        
        # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        X_augmented, y_augmented = augment_images(X_train, y_train)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        os.makedirs("data/augmented", exist_ok=True)
        np.save("data/augmented/X_augmented.npy", X_augmented)
        np.save("data/augmented/y_augmented.npy", y_augmented)
        
        print(f"–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(X_train)} samples")
        print(f"  –ü–æ—Å–ª–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {len(X_augmented)} samples")
        print(f"  –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ {len(X_augmented) / len(X_train):.2f} —Ä–∞–∑")

if __name__ == "__main__":
    main()