import os
import yaml
import mlflow
import mlflow.keras
import mlflow.sklearn
import tensorflow as tf
from typing import Dict, Any
import numpy as np

def get_mlflow_tracking_uri():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ tracking URI –¥–ª—è Windows"""
    current_dir = os.path.abspath(".")
    return f"file:///{current_dir.replace(':', '')}/mlruns"

def load_params() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
    with open('params.yaml', 'r') as f:
        return yaml.safe_load(f)

def setup_mlflow_experiment(experiment_name: str = "Food_Classification"):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLflow —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è Windows
    current_dir = os.path.abspath(".")
    tracking_uri = f"file:///{current_dir.replace(':', '')}/mlruns"
    mlflow.set_tracking_uri(tracking_uri)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("mlruns", exist_ok=True)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
        experiment = mlflow.get_experiment_by_name(experiment_name)
        if experiment is None:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
            experiment_id = mlflow.create_experiment(
                experiment_name,
                artifact_location=os.path.join(current_dir, "mlruns", experiment_name)
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {experiment_name}")
        else:
            experiment_id = experiment.experiment_id
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {experiment_name}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
        mlflow.set_experiment(experiment_name)
        return experiment_id
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ MLflow: {e}")
        print("üîß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ MLflow...")
        return None

def log_params_to_mlflow(params: Dict[str, Any]):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ MLflow"""
    for key, value in params.items():
        if isinstance(value, dict):
            for sub_key, sub_value in value.items():
                mlflow.log_param(f"{key}.{sub_key}", sub_value)
        else:
            mlflow.log_param(key, value)

def create_model_checkpoint_callback():
    """–°–æ–∑–¥–∞–Ω–∏–µ callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏"""
    checkpoint_path = "models/best_model/best_model.keras"
    os.makedirs("models/best_model", exist_ok=True)
    return tf.keras.callbacks.ModelCheckpoint(
        checkpoint_path,
        monitor='val_accuracy',
        save_best_only=True,
        save_weights_only=False,
        mode='max',
        verbose=1
    )

def setup_mlflow_experiment_safe(experiment_name: str = "Food_Classification"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MLflow —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è Windows
    current_dir = os.path.abspath(".")
    tracking_uri = f"file:///{current_dir.replace(':', '')}/mlruns"
    mlflow.set_tracking_uri(tracking_uri)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("mlruns", exist_ok=True)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
        experiment = mlflow.get_experiment_by_name(experiment_name)
        if experiment is None:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
            experiment_id = mlflow.create_experiment(
                experiment_name,
                artifact_location=os.path.join(current_dir, "mlruns", experiment_name)
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {experiment_name}")
        else:
            experiment_id = experiment.experiment_id
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {experiment_name}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
        mlflow.set_experiment(experiment_name)
        return experiment_id
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ MLflow: {e}")
        return None
    
def convert_numpy_types(obj):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è numpy —Ç–∏–ø–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Python —Ç–∏–ø—ã –¥–ª—è JSON"""
    if isinstance(obj, (np.float32, np.float64, np.float16)):
        return float(obj)
    elif isinstance(obj, (np.int32, np.int64, np.int16, np.int8)):
        return int(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, dict):
        return {key: convert_numpy_types(value) for key, value in obj.items()}
    elif isinstance(obj, list):
        return [convert_numpy_types(item) for item in obj]
    elif isinstance(obj, tuple):
        return tuple(convert_numpy_types(item) for item in obj)
    else:
        return obj